'use client'

import { useState } from "react";
import Image from "next/image";
import { Button } from "./ui/button";
import { DialogDescription, DialogHeader, DialogTitle } from "./ui/dialog";
import { signIn } from "next-auth/react";
import { Input } from "./ui/input";
import { AlertCircle } from "lucide-react";
import { toast } from "sonner";

const LoginDialog = () => {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [errorLogin, setErrorLogin] = useState("");
    const [isRegistering, setIsRegistering] = useState(false);
    const [isLoading, setIsLoading] = useState(false);

    const handleLoginWithGoogle = () => signIn('google');

    const handleLoginWithCredentials = async () => {
        setIsLoading(true);
        setErrorLogin("");

        const result = await signIn('credentials', {
            redirect: false,
            email,
            password
        });

        setIsLoading(false);

        if (!result?.ok) {
            setEmail("");
            setPassword("");
            setErrorLogin("Email ou senha incorretos");
        } else {
            toast.success("Login realizado com sucesso!");
        }
    };

    const handleRegister = async () => {
        if (password !== confirmPassword) {
            setErrorLogin("As senhas não coincidem.");
            return;
        }

        setIsLoading(true);
        setErrorLogin("");

        const result = await signIn('credentials', {
            redirect: false,
            email,
            password,
        });

        setIsLoading(false);

        if (result?.error) {
            setErrorLogin(result.error);
        } else {
            toast.success("Conta criada com sucesso!");
            setIsRegistering(false);
        }
    };

    return (
        <>
            <DialogHeader>
                <DialogTitle className="text-start mb-2">
                    {isRegistering ? "Crie sua conta" : "Faça seu login na plataforma"}
                </DialogTitle>
                {!isRegistering && (
                    <DialogDescription className="flex gap-1 border-[0.1px] rounded-xl p-2 bg-muted text-foreground">
                        <div>
                            <AlertCircle size={16} color="red" />
                        </div>
                        <div className="text-start">
                            Para conseguir entrar usando sua conta Google, será preciso acessar à plataforma através do seu navegador.
                        </div>
                    </DialogDescription>
                )}
            </DialogHeader>

            <div className="flex flex-col gap-2">
                <Input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                />
                <Input
                    type="password"
                    placeholder="Senha"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                />

                {isRegistering && (
                    <Input
                        type="password"
                        placeholder="Confirme sua senha"
                        value={confirmPassword}
                        onChange={(e) => setConfirmPassword(e.target.value)}
                    />
                )}

                <Button
                    className="mt-2 rounded-xl"
                    onClick={isRegistering ? handleRegister : handleLoginWithCredentials}
                    disabled={isLoading}
                >
                    {isRegistering ? "Cadastrar" : "Login"}
                </Button>

                {errorLogin && <p className="text-red-500 text-sm text-center">{errorLogin}</p>}

                <button
                    className="mt-2 mb-4 text-sm m-auto"
                    onClick={() => {
                        setIsRegistering(!isRegistering);
                        setErrorLogin(""); // Limpa o erro ao trocar entre login e cadastro
                    }}
                >
                    {isRegistering ? (
                        <p>
                            Já tem uma conta?{" "}
                            <span className="font-bold text-primary underline">Faça Login</span>
                        </p>
                    ) : (
                        <p>
                            Não tem uma conta?{" "}
                            <span className="font-bold text-primary underline">Cadastre-se</span>
                        </p>
                    )}
                </button>
            </div>

            {!isRegistering && (
                <>
                    <p className="text-center mt-1 text-sm text-muted-foreground border-b-[0.1px]"></p>
                    <p className="text-center text-sm text-muted-foreground">Ou entre com Google</p>
                    <Button className="flex gap-1 rounded-xl" onClick={handleLoginWithGoogle}>
                        <Image src={"/googleIcon.svg"} width={16} height={16} alt="icon Google" />
                        <p className="font-bold">Google</p>
                    </Button>
                </>
            )}
        </>
    );
}

export default LoginDialog;

